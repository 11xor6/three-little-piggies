/* The following code was generated by JFlex 1.4.3 on 5/22/11 8:08 PM */

package com.metamx.idea.pig;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/22/11 8:08 PM from the specification file
 * <tt>/Users/nikhodgkinson/src/three-little-piggies/src/main/com/metamx/idea/pig/pig.flex</tt>
 */
class PigLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\12\1\0\1\4\1\12\16\6\4\0\1\4\1\71"+
    "\1\0\1\72\1\74\1\73\1\0\1\25\1\54\1\55\1\10\1\22"+
    "\1\63\1\11\1\20\1\7\1\13\7\2\2\1\1\70\1\62\1\66"+
    "\1\64\1\65\1\67\1\0\1\33\1\40\1\37\1\46\1\31\1\32"+
    "\1\41\1\42\1\47\1\51\1\5\1\34\1\50\1\36\1\44\1\45"+
    "\1\53\1\27\1\35\1\26\1\30\1\52\1\5\1\14\1\43\1\5"+
    "\1\60\1\24\1\61\1\0\1\5\1\23\3\3\1\17\1\21\1\16"+
    "\5\5\1\15\13\5\1\14\2\5\1\56\1\0\1\57\1\0\41\6"+
    "\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5"+
    "\5\0\27\5\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5"+
    "\16\0\5\5\11\0\1\5\21\0\130\6\5\0\23\6\12\0\1\5"+
    "\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\54\5"+
    "\1\0\46\5\1\0\5\5\4\0\202\5\1\0\4\6\3\0\105\5"+
    "\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5"+
    "\7\0\47\5\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\13\0\33\5\5\0\3\5\15\0\4\6"+
    "\14\0\6\6\13\0\32\5\5\0\13\5\16\6\7\0\12\6\4\0"+
    "\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6"+
    "\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5"+
    "\1\6\36\5\33\6\2\0\3\5\60\0\46\5\13\6\1\5\u014f\0"+
    "\3\6\66\5\2\0\1\6\1\5\20\6\2\0\1\5\4\6\3\0"+
    "\12\5\2\6\2\0\12\6\21\0\3\6\1\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6"+
    "\1\5\7\6\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\5"+
    "\1\0\3\5\2\6\2\0\12\6\4\5\15\0\3\6\1\0\6\5"+
    "\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5"+
    "\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6"+
    "\13\0\4\5\1\0\1\5\7\0\14\6\3\5\14\0\3\6\1\0"+
    "\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0"+
    "\1\5\17\0\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\2\0\1\6\1\5\6\6\3\0\2\6\2\0\3\6"+
    "\10\0\2\6\4\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5"+
    "\20\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0"+
    "\10\5\1\0\3\5\4\0\5\6\3\0\3\6\1\0\4\6\11\0"+
    "\1\6\17\0\11\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0"+
    "\3\5\1\0\27\5\1\0\12\5\1\0\5\5\4\0\7\6\1\0"+
    "\3\6\1\0\4\6\7\0\2\6\11\0\2\5\4\0\12\6\22\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\7\0\1\5\1\0\2\5\4\0\12\6\22\0\2\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\20\5\4\0\6\6\2\0"+
    "\3\6\1\0\4\6\11\0\1\6\10\0\2\5\4\0\12\6\22\0"+
    "\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0"+
    "\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0"+
    "\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0"+
    "\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6"+
    "\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0"+
    "\2\5\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\10\5\1\0\42\5\6\0\24\6"+
    "\1\0\2\6\4\5\4\0\10\6\1\0\44\6\11\0\1\6\71\0"+
    "\42\5\1\0\5\5\1\0\2\5\1\0\7\6\3\0\4\6\6\0"+
    "\12\6\6\0\6\5\4\6\106\0\46\5\12\0\51\5\7\0\132\5"+
    "\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5"+
    "\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5"+
    "\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\47\5\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5"+
    "\2\0\10\5\12\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5"+
    "\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0"+
    "\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5"+
    "\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0"+
    "\130\5\10\0\51\5\1\6\126\0\35\5\3\0\14\6\4\0\14\6"+
    "\12\0\12\6\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0"+
    "\132\5\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0"+
    "\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0"+
    "\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0"+
    "\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\17\0"+
    "\4\6\32\0\5\6\20\0\2\5\23\0\1\5\13\0\4\6\6\0"+
    "\6\6\1\0\1\5\15\0\1\5\40\0\22\5\36\0\15\6\4\0"+
    "\1\6\3\0\6\6\27\0\1\5\4\0\1\5\2\0\12\5\1\0"+
    "\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\26\0"+
    "\44\5\u0e81\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5"+
    "\4\0\126\5\2\0\2\6\2\0\3\5\1\0\137\5\5\0\50\5"+
    "\4\0\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5"+
    "\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5"+
    "\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5"+
    "\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\4\6"+
    "\17\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5"+
    "\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5"+
    "\1\0\32\5\12\0\132\5\3\0\6\5\2\0\6\5\2\0\6\5"+
    "\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\1\1\13\23\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\1\32\1\33"+
    "\1\34\3\35\1\36\1\37\1\0\2\2\1\40\2\12"+
    "\1\41\2\13\7\3\1\42\5\3\1\43\1\3\1\44"+
    "\17\3\1\45\2\3\1\46\6\3\1\47\1\50\5\3"+
    "\1\51\1\52\1\53\1\54\1\55\1\35\1\36\1\56"+
    "\15\3\1\57\1\60\1\61\13\3\1\62\1\63\4\3"+
    "\1\64\1\65\12\3\1\66\4\3\1\67\2\3\1\0"+
    "\2\56\1\70\6\3\1\71\5\3\1\72\1\73\1\74"+
    "\7\3\1\75\1\3\1\76\15\3\1\77\2\3\1\100"+
    "\5\3\1\101\1\102\1\36\1\0\1\103\2\3\1\104"+
    "\1\105\1\106\1\107\1\3\1\110\2\3\1\111\1\3"+
    "\1\112\2\3\1\113\1\3\1\114\1\115\1\116\2\3"+
    "\1\117\1\3\1\120\1\121\7\3\1\122\1\123\7\3"+
    "\1\124\1\125\1\126\1\127\1\130\3\3\1\131\3\3"+
    "\1\132\1\133\1\3\1\134\2\3\1\135\1\136\1\137"+
    "\1\140\1\3\1\141\5\3\1\142\2\3\1\143\1\144"+
    "\1\3\1\145\1\146\1\3\1\147\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\75\0\u016e"+
    "\0\u01ab\0\u01e8\0\75\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0763\0\u07a0\0\u07dd\0\75\0\u081a\0\u0857\0\75"+
    "\0\75\0\75\0\75\0\75\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\75\0\75\0\u0a3f\0\75\0\u0a7c"+
    "\0\75\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\267\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\267\0\267\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\75\0\75\0\75\0\75\0\75\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\267\0\267"+
    "\0\267\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\267\0\267\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\267\0\267\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\75\0\267\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\267\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\267\0\267"+
    "\0\267\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\267\0\u25e3\0\267\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714"+
    "\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\267\0\u2939\0\u2976\0\267\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\267\0\267\0\75\0\u2ae4\0\267\0\u2b21\0\u2b5e"+
    "\0\267\0\267\0\267\0\267\0\u2b9b\0\267\0\u2bd8\0\u2c15"+
    "\0\267\0\u2c52\0\267\0\u2c8f\0\u2ccc\0\267\0\u2d09\0\267"+
    "\0\267\0\267\0\u2d46\0\u2d83\0\267\0\u2dc0\0\267\0\267"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\267"+
    "\0\267\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\267\0\267\0\267\0\267\0\267\0\u3153\0\u3190\0\u31cd"+
    "\0\267\0\u320a\0\u3247\0\u3284\0\267\0\267\0\u32c1\0\267"+
    "\0\u32fe\0\u333b\0\267\0\267\0\267\0\267\0\u3378\0\267"+
    "\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\267\0\u34e6\0\u3523"+
    "\0\267\0\267\0\u3560\0\267\0\267\0\u359d\0\267\0\267"+
    "\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\4\1\2\1\6\1\7"+
    "\1\10\1\5\1\11\4\4\1\12\1\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\4\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\4\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\4"+
    "\76\0\2\3\10\0\1\3\1\0\1\62\1\63\1\64"+
    "\1\65\1\66\7\0\1\66\1\63\1\0\1\62\11\0"+
    "\1\64\27\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\26\4\20\0\1\4\4\0\1\5\5\0"+
    "\1\5\72\0\1\67\75\0\1\70\64\0\1\71\1\72"+
    "\10\0\1\72\1\73\1\62\1\63\1\64\1\65\1\66"+
    "\7\0\1\66\1\63\1\0\1\62\11\0\1\64\27\0"+
    "\2\65\10\0\1\65\4\0\1\74\54\0\12\14\1\0"+
    "\10\14\1\75\1\76\50\14\74\0\1\77\12\16\1\0"+
    "\11\16\1\100\1\101\47\16\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\4\1\102\1\103"+
    "\11\4\1\104\11\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\105"+
    "\15\4\1\106\4\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\7\4\1\107"+
    "\1\110\15\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\25\4\1\111\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\2\4\1\112\2\4\1\113\1\114\7\4"+
    "\1\115\2\4\1\116\4\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\7\4"+
    "\1\117\1\120\15\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\121\2\4"+
    "\1\122\12\4\1\123\2\4\1\124\4\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\125\4\4\1\126\6\4\1\127\2\4\1\130"+
    "\6\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\2\4\1\131\1\132\12\4"+
    "\1\133\7\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\4\1\134\3\4"+
    "\1\135\6\4\1\136\1\4\1\137\7\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\140\20\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\141"+
    "\1\142\1\4\1\143\22\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\144\1\145\5\4\1\146\15\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\5\4\1\147\20\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\150"+
    "\12\4\1\151\2\4\1\152\4\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\4\4\1\153\2\4\1\154\1\155\11\4\1\156\3\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\5\4\1\157\20\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\16\4\1\160\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\16\4"+
    "\1\161\7\4\20\0\1\4\64\0\1\162\74\0\1\163"+
    "\74\0\1\164\100\0\1\165\70\0\1\166\11\0\2\65"+
    "\10\0\1\65\2\0\1\63\1\64\1\0\1\66\7\0"+
    "\1\66\1\63\13\0\1\64\27\0\2\167\6\0\1\167"+
    "\1\0\1\167\2\0\1\63\1\64\2\0\1\167\7\0"+
    "\1\63\13\0\1\64\26\0\10\170\1\171\64\170\12\70"+
    "\1\0\62\70\1\0\2\71\10\0\1\71\2\0\1\63"+
    "\1\64\1\65\1\66\7\0\1\66\1\63\13\0\1\64"+
    "\27\0\1\71\1\72\10\0\1\72\1\0\1\62\1\63"+
    "\1\64\1\65\1\66\7\0\1\66\1\63\1\0\1\62"+
    "\11\0\1\64\27\0\3\73\7\0\1\73\1\0\1\62"+
    "\2\73\1\0\1\73\7\0\3\73\1\62\2\0\2\73"+
    "\5\0\1\73\26\0\12\14\1\0\62\14\12\16\1\0"+
    "\62\16\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\2\4\1\172\23\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\17\4\1\173\6\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\4\1\174"+
    "\24\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\175\25\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\13\4\1\176\12\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\21\4"+
    "\1\177\4\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\21\4\1\200\4\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\6\4\1\201\17\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\6\4\1\202\17\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\5\4"+
    "\1\203\10\4\1\204\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\205\24\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\6\4\1\206\17\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\11\4\1\207\14\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\20\4\1\210\5\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\211\22\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\4\4\1\212\21\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\5\4\1\213\2\4\1\214\15\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\22\4\1\215\3\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\216\14\4\1\217\1\4\1\220\5\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\22\4\1\221\3\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\21\4\1\222\4\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\223\17\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\6\4\1\224\17\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\25\4\1\225\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\226\25\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\16\4\1\227\7\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\11\4\1\230\14\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\231\20\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\13\4"+
    "\1\232\12\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\13\4\1\233\12\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\234\22\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\16\4\1\235\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\236\15\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\20\4\1\237\5\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\240\25\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\7\4\1\241\16\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\4\1\242"+
    "\24\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\4\4\1\243\2\4\1\244"+
    "\16\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\2\4\1\245\23\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\7\4\1\246\16\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\247\7\4\1\250\6\4\1\251\6\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\17\4\1\252\6\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\253"+
    "\16\4\1\254\6\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\21\4\1\255"+
    "\4\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\21\4\1\256\4\4\20\0"+
    "\1\4\1\0\2\167\10\0\1\167\2\0\1\63\1\64"+
    "\12\0\1\63\13\0\1\64\26\0\10\170\1\257\64\170"+
    "\7\260\1\261\1\171\64\260\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\262\22\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\6\4\1\263\17\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\16\4\1\264\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\2\4"+
    "\1\265\23\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\14\4\1\266\11\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\10\4\1\267\15\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\16\4\1\270\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\271\17\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\7\4\1\272\16\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\273\25\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\5\4\1\274\20\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\275"+
    "\22\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\276\25\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\277\25\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\20\4\1\300"+
    "\5\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\13\4\1\301\12\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\21\4\1\302\4\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\303\22\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\4\1\304"+
    "\24\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\305\12\4\1\306"+
    "\2\4\1\307\4\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\17\4\1\310"+
    "\6\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\17\4\1\311\6\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\21\4\1\312\4\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\313\17\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\7\4\1\314"+
    "\16\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\14\4\1\315\11\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\316\24\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\4\1\317\24\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\2\4\1\320"+
    "\23\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\321\22\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\322\22\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\323\13\4\1\324\6\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\11\4\1\325\14\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\326\4\4"+
    "\1\327\20\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\21\4\1\330\4\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\11\4\1\331\14\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\12\4\1\332\13\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\333"+
    "\25\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\16\4\1\334\7\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\335\22\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\2\4\1\336\23\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\16\4\1\337"+
    "\7\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\11\4\1\340\14\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\341\24\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\10\4\1\342\15\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\20\4\1\343"+
    "\5\4\20\0\1\4\7\170\1\344\1\257\64\170\10\260"+
    "\1\345\64\260\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\346\22\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\2\4\1\347\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\350\24\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\351\25\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\13\4\1\352\12\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\10\4\1\353\15\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\354"+
    "\22\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\355\25\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\356\25\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\5\4\1\357"+
    "\20\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\360\22\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\361\25\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\5\4"+
    "\1\362\20\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\363\22\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\4\1\364\24\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\2\4\1\365\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\366\15\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\6\4\1\367\17\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\370\25\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\7\4\1\371\16\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\372"+
    "\22\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\5\4\1\373\20\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\16\4\1\374\7\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\17\4\1\375\6\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\4\1\376"+
    "\24\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\377\24\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\u0100\24\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\2\4\1\u0101\23\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\14\4\1\u0102"+
    "\11\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\21\4\1\u0103\4\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\6\4\1\u0104\17\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\10\4\1\u0105\15\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\6\4\1\u0106"+
    "\17\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\21\4\1\u0107\4\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\u0108\24\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\u0109\25\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\4\1\u010a\24\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\14\4\1\u010b\11\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\u010c\22\4\20\0\1\4\7\260\1\261"+
    "\1\345\64\260\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\13\4\1\u010d\12\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\10\4\1\u010e\15\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u010f\22\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\11\4\1\u0110\14\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\4\1\u0111\24\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\22\4\1\u0112\3\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\u0113\24\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\u0114\25\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\u0115\22\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\4\1\u0116\24\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\2\4\1\u0117"+
    "\23\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\5\4\1\u0118\20\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\u0119\25\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u011a\22\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\u011b\25\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\6\4\1\u011c\17\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\u011d\22\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\u011e"+
    "\22\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\10\4\1\u011f\15\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\u0120\25\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u0121\22\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\20\4\1\u0122\5\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\14\4\1\u0123\11\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\7\4\1\u0124\16\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\u0125\15\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\14\4\1\u0126\11\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\4\1\u0127\24\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\17\4\1\u0128\6\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\u0129"+
    "\25\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\22\4\1\u012a\3\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\21\4\1\u012b\4\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\u012c\22\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\11\4\1\u012d"+
    "\14\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\7\4\1\u012e\16\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\2\4\1\u012f\23\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\5\4\1\u0130\20\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\u0131"+
    "\22\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\5\4\1\u0132\20\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\16\4\1\u0133\7\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\u0134\17\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\u0135\25\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\11\4\1\u0136\14\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\15\4\1\u0137\10\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\u0138\15\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\u0139\22\4"+
    "\20\0\1\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13786];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\1\11\26\1\10\11"+
    "\3\1\1\11\2\1\5\11\4\1\1\0\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\60\1\5\11\70\1\1\0"+
    "\1\1\1\11\62\1\1\11\1\0\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  PigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1778) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 76: 
          { return PigTokenType.SPLIT_KEYWORD;
          }
        case 106: break;
        case 57: 
          { return PigTokenType.FULL_KEYWORD;
          }
        case 107: break;
        case 85: 
          { return PigTokenType.STREAM_KEYWORD;
          }
        case 108: break;
        case 46: 
          { return PigTokenType.DOC_COMMENT;
          }
        case 109: break;
        case 74: 
          { return PigTokenType.STORE_KEYWORD;
          }
        case 110: break;
        case 12: 
          { return PigTokenType.LPARENTH;
          }
        case 111: break;
        case 80: 
          { return PigTokenType.ORDER_KEYWORD;
          }
        case 112: break;
        case 39: 
          { return PigTokenType.IF_KEYWORD;
          }
        case 113: break;
        case 54: 
          { return PigTokenType.INT_KEYWORD;
          }
        case 114: break;
        case 81: 
          { return PigTokenType.OUTER_KEYWORD;
          }
        case 115: break;
        case 92: 
          { return PigTokenType.IMPORT_KEYWORD;
          }
        case 116: break;
        case 87: 
          { return PigTokenType.STDOUT_KEYWORD;
          }
        case 117: break;
        case 67: 
          { return PigTokenType.TUPLE_KEYWORD;
          }
        case 118: break;
        case 1: 
          { return PigTokenType.BAD_CHARACTER;
          }
        case 119: break;
        case 71: 
          { return PigTokenType.FALSE_KEYWORD;
          }
        case 120: break;
        case 47: 
          { return PigTokenType.ASC_KEYWORD;
          }
        case 121: break;
        case 65: 
          { return PigTokenType.JOIN_KEYWORD;
          }
        case 122: break;
        case 9: 
          { return PigTokenType.PLUS;
          }
        case 123: break;
        case 41: 
          { return PigTokenType.EQEQ;
          }
        case 124: break;
        case 5: 
          { return PigTokenType.DIV;
          }
        case 125: break;
        case 96: 
          { return PigTokenType.FOREACH_KEYWORD;
          }
        case 126: break;
        case 78: 
          { return PigTokenType.CACHE_KEYWORD;
          }
        case 127: break;
        case 105: 
          { return PigTokenType.MAPREDUCE_KEYWORD;
          }
        case 128: break;
        case 72: 
          { return PigTokenType.FLOAT_KEYWORD;
          }
        case 129: break;
        case 36: 
          { return PigTokenType.STR_OP_LT;
          }
        case 130: break;
        case 69: 
          { return PigTokenType.USING_KEYWORD;
          }
        case 131: break;
        case 60: 
          { return PigTokenType.LONG_KEYWORD;
          }
        case 132: break;
        case 61: 
          { return PigTokenType.SHIP_KEYWORD;
          }
        case 133: break;
        case 23: 
          { return PigTokenType.QMARK;
          }
        case 134: break;
        case 79: 
          { return PigTokenType.GROUP_KEYWORD;
          }
        case 135: break;
        case 30: 
          { return PigTokenType.C_STYLE_COMMENT;
          }
        case 136: break;
        case 3: 
          { return PigTokenType.IDENTIFIER;
          }
        case 137: break;
        case 62: 
          { return PigTokenType.NULL_KEYWORD;
          }
        case 138: break;
        case 101: 
          { return PigTokenType.PARALLEL_KEYWORD;
          }
        case 139: break;
        case 70: 
          { return PigTokenType.UNION_KEYWORD;
          }
        case 140: break;
        case 8: 
          { return PigTokenType.DOT;
          }
        case 141: break;
        case 64: 
          { return PigTokenType.INTO_KEYWORD;
          }
        case 142: break;
        case 7: 
          { return PigTokenType.MINUS;
          }
        case 143: break;
        case 45: 
          { return PigTokenType.NOTEQ;
          }
        case 144: break;
        case 95: 
          { return PigTokenType.FLATTEN_KEYWORD;
          }
        case 145: break;
        case 32: 
          { return PigTokenType.DOUBLE_PERIOD;
          }
        case 146: break;
        case 63: 
          { return PigTokenType.DESC_KEYWORD;
          }
        case 147: break;
        case 99: 
          { return PigTokenType.GENERATE_KEYWORD;
          }
        case 148: break;
        case 37: 
          { return PigTokenType.STR_OP_GT;
          }
        case 149: break;
        case 59: 
          { return PigTokenType.LOAD_KEYWORD;
          }
        case 150: break;
        case 100: 
          { return PigTokenType.ONSCHEMA_KEYWORD;
          }
        case 151: break;
        case 52: 
          { return PigTokenType.BAG_KEYWORD;
          }
        case 152: break;
        case 94: 
          { return PigTokenType.RETURNS_KEYWORD;
          }
        case 153: break;
        case 10: 
          { return PigTokenType.EXEC_LITERAL;
          }
        case 154: break;
        case 25: 
          { return PigTokenType.POUND;
          }
        case 155: break;
        case 20: 
          { return PigTokenType.EQUAL;
          }
        case 156: break;
        case 11: 
          { return PigTokenType.STRING_LITERAL;
          }
        case 157: break;
        case 29: 
          { return PigTokenType.DOUBLE_LITERAL;
          }
        case 158: break;
        case 18: 
          { return PigTokenType.SEMICOLON;
          }
        case 159: break;
        case 58: 
          { return PigTokenType.LEFT_KEYWORD;
          }
        case 160: break;
        case 6: 
          { return PigTokenType.STAR;
          }
        case 161: break;
        case 84: 
          { return PigTokenType.FILTER_KEYWORD;
          }
        case 162: break;
        case 51: 
          { return PigTokenType.NOT;
          }
        case 163: break;
        case 24: 
          { return PigTokenType.COLON;
          }
        case 164: break;
        case 53: 
          { return PigTokenType.STR_OP_GTE;
          }
        case 165: break;
        case 44: 
          { return PigTokenType.DCOLON;
          }
        case 166: break;
        case 26: 
          { return PigTokenType.PERCENT;
          }
        case 167: break;
        case 75: 
          { return PigTokenType.STDIN_KEYWORD;
          }
        case 168: break;
        case 50: 
          { return PigTokenType.STR_OP_NE;
          }
        case 169: break;
        case 73: 
          { return PigTokenType.LIMIT_KEYWORD;
          }
        case 170: break;
        case 97: 
          { return PigTokenType.COGROUP_KEYWORD;
          }
        case 171: break;
        case 22: 
          { return PigTokenType.LT;
          }
        case 172: break;
        case 31: 
          { return PigTokenType.END_OF_LINE_COMMENT;
          }
        case 173: break;
        case 103: 
          { return PigTokenType.CHARARRAY_KEYWORD;
          }
        case 174: break;
        case 102: 
          { return PigTokenType.DISTINCT_KEYWORD;
          }
        case 175: break;
        case 93: 
          { return PigTokenType.THROUGH_KEYWORD;
          }
        case 176: break;
        case 98: 
          { return PigTokenType.STR_OP_MATCHES;
          }
        case 177: break;
        case 49: 
          { return PigTokenType.STR_OP_LTE;
          }
        case 178: break;
        case 83: 
          { return PigTokenType.INPUT_KEYWORD;
          }
        case 179: break;
        case 33: 
          { return PigTokenType.DOLLAR;
          }
        case 180: break;
        case 68: 
          { return PigTokenType.RIGHT_KEYWORD;
          }
        case 181: break;
        case 19: 
          { return PigTokenType.COMMA;
          }
        case 182: break;
        case 82: 
          { return PigTokenType.INNER_KEYWORD;
          }
        case 183: break;
        case 21: 
          { return PigTokenType.GT;
          }
        case 184: break;
        case 91: 
          { return PigTokenType.DOUBLE_KEYWORD;
          }
        case 185: break;
        case 55: 
          { return PigTokenType.MAP_KEYWORD;
          }
        case 186: break;
        case 77: 
          { return PigTokenType.CROSS_KEYWORD;
          }
        case 187: break;
        case 35: 
          { return PigTokenType.AS_KEYWORD;
          }
        case 188: break;
        case 66: 
          { return PigTokenType.VOID_KEYWORD;
          }
        case 189: break;
        case 89: 
          { return PigTokenType.OUTPUT_KEYWORD;
          }
        case 190: break;
        case 13: 
          { return PigTokenType.RPARENTH;
          }
        case 191: break;
        case 48: 
          { return PigTokenType.AND;
          }
        case 192: break;
        case 27: 
          { return PigTokenType.LONG_LITERAL;
          }
        case 193: break;
        case 90: 
          { return PigTokenType.DEFINE_KEYWORD;
          }
        case 194: break;
        case 42: 
          { return PigTokenType.GTEQ;
          }
        case 195: break;
        case 104: 
          { return PigTokenType.PARTITION_KEYWORD;
          }
        case 196: break;
        case 86: 
          { return PigTokenType.STDERROR_KEYWORD;
          }
        case 197: break;
        case 38: 
          { return PigTokenType.OR;
          }
        case 198: break;
        case 15: 
          { return PigTokenType.RBRACE;
          }
        case 199: break;
        case 40: 
          { return PigTokenType.IS_KEYWORD;
          }
        case 200: break;
        case 14: 
          { return PigTokenType.LBRACE;
          }
        case 201: break;
        case 56: 
          { return PigTokenType.TRUE_KEYWORD;
          }
        case 202: break;
        case 17: 
          { return PigTokenType.RBRACK;
          }
        case 203: break;
        case 43: 
          { return PigTokenType.LTEQ;
          }
        case 204: break;
        case 16: 
          { return PigTokenType.LBRACK;
          }
        case 205: break;
        case 2: 
          { return PigTokenType.INTEGER_LITERAL;
          }
        case 206: break;
        case 4: 
          { return PigTokenType.WHITE_SPACE;
          }
        case 207: break;
        case 34: 
          { return PigTokenType.STR_OP_EQ;
          }
        case 208: break;
        case 88: 
          { return PigTokenType.SAMPLE_KEYWORD;
          }
        case 209: break;
        case 28: 
          { return PigTokenType.FLOAT_LITERAL;
          }
        case 210: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
